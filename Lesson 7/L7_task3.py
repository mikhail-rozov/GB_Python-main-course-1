# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны
# применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное)
# деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
# ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек
# в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, cells):
        self.cells = cells

    def __str__(self):
        return str(self.cells)

    def __add__(self, other):
        return Cell(self.cells + other.cells)

    def __sub__(self, other):
        return Cell(self.cells - other.cells) if self.cells - other.cells > 0 else 'Invalid result. The subtraction ' \
                                                                                   'result should be greater than zero.'

    def __mul__(self, other):
        return Cell(self.cells * other.cells)

    def __floordiv__(self, other):
        try:
            return Cell(self.cells // other.cells)
        except ZeroDivisionError:
            return 'Division by zero.'

    def make_order(self, row):
        if row <= 0:
            return 'Число рядов должно быть положительным.'
        result = ''
        counter = self.cells
        while counter > 0:
            for i in range(row):
                if counter <= 0:
                    break
                result += '*'
                counter -= 1
                if i == row - 1:
                    result += '\n'
        return result


cell_1 = Cell(22)
cell_2 = Cell(9)

print(f'Сложение двух клеток: {cell_1 + cell_2}')
print(f'Вычитание двух клеток: {cell_1 - cell_2}')
print(f'Умножение двух клеток: {cell_1 * cell_2}')
print(f'Деление двух клеток: {cell_1 // cell_2}')

print(f'Клетки в наглядном представлении:\n{cell_1.make_order(5)}')
